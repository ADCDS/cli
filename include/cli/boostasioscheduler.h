/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2020 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_BOOSTASIOSCHEDULER_H_
#define CLI_BOOSTASIOSCHEDULER_H_

#include "detail/boostasio.h"
#include "scheduler.h"

namespace cli
{

class BoostAsioScheduler : public Scheduler
{
public:

#if BOOST_VERSION < 106600
    using ContextType = boost::asio::io_service;
#else
    using ContextType = boost::asio::io_context;
#endif

    BoostAsioScheduler() = default;
    // non copyable
    BoostAsioScheduler(const BoostAsioScheduler&) = delete;
    BoostAsioScheduler& operator=(const BoostAsioScheduler&) = delete;

    void Stop()
    {
        context.stop();
    }

    void Run()
    {
#if BOOST_VERSION < 106600
        boost::asio::io_service::work work(context);
#else
        auto work = boost::asio::make_work_guard(context);
#endif    
        context.run();
    }

    void ExecOne()
    {
        context.run_one();
    }

    void Post(const std::function<void()>& f) override
    {
#if BOOST_VERSION < 106600
        context.post(f);
#else
        auto executor = context.get_executor();
        boost::asio::post(executor, f);
#endif
    }

    ContextType& AsioContext()
    {
        return context;
    }

private:

    ContextType context;
};

} // namespace cli

#endif // CLI_BOOSTASIOSCHEDULER_H_
