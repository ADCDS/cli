/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2021 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_TERMINALPROFILE_H_
#define CLI_TERMINALPROFILE_H_

#include "detail/rang.h"

namespace cli
{

struct BeforePrompt { bool& color; };
struct AfterPrompt { bool& color; };
struct BeforeInput { bool& color; };
struct AfterInput { bool& color; };



inline std::ostream& operator<<(std::ostream& os, BeforePrompt bp)
{
    if (bp.color) { os << rang::control::forceColor << rang::fg::green << rang::style::bold; }
    return os;
}

inline std::ostream& operator<<(std::ostream& os, AfterPrompt)
{
    os << rang::style::reset;
    return os;
}

inline std::ostream& operator<<(std::ostream& os, BeforeInput bi)
{
    if (bi.color) { os << rang::control::forceColor << rang::fgB::gray; }
    return os;
}

inline std::ostream& operator<<(std::ostream& os, AfterInput)
{
    os << rang::style::reset;
    return os;
}


class TerminalProfile
{
public:
    TerminalProfile() : 
        beforePrompt{color},
        afterPrompt{color},
        beforeInput{color},
        afterInput{color}
    {}
    void SetColor() { color = true; }
    void SetNoColor() { color = false; }
    //bool Color() const { return color; }

    BeforePrompt beforePrompt;
    AfterPrompt afterPrompt;
    BeforeInput beforeInput;
    AfterInput afterInput;
private:
    bool color;
};

} // namespace cli

#endif // CLI_TERMINALPROFILE_H_
