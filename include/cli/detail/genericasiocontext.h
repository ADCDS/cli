/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016-2020 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_DETAIL_GENERICASIOCONTAINER_H_
#define CLI_DETAIL_GENERICASIOCONTAINER_H_

namespace cli {
namespace detail {
namespace genericasiocontainer {

class Executor
{
public:
    using ContextType = asiolib::io_context;
    explicit Executor(ContextType& ios) :
        executor(ios.get_executor()) {}
    explicit Executor(asiolib::ip::tcp::socket& socket) :
        executor(socket.get_executor()) {}
    template <typename T> void Post(T&& t) { asiolib::post(executor, std::forward<T>(t)); }
private:
    asiolib::executor executor;
};

inline asiolib::ip::address IpAddressFromString(const std::string& address)
{
    return asiolib::ip::make_address(address);
}

inline auto MakeWorkGuard(asiolib::io_context& context)
{
    return asiolib::make_work_guard(context);
}

} // namespace genericasiocontainer
} // namespace detail
} // namespace cli

#endif // CLI_DETAIL_GENERICASIOCONTAINER_H_

